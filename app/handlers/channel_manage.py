from aiogram import Router, types, F
from loguru import logger
from bson import ObjectId
from app.db.mongo import channels_collection

router = Router()

# ---------------------
# ‚öôÔ∏è CALLBACK PREFIX
# ---------------------
CB_PREFIX = "channel_manage"


# ---------------------
# üîπ OPEN MANAGEMENT PANEL
# ---------------------
@router.callback_query(F.data == "manage_channels")
async def open_manage_panel(cb: types.CallbackQuery):
    user_id = cb.from_user.id
    channels = [ch async for ch in channels_collection.find({"owner_id": user_id})]
    keyboard = []
    if not channels:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï ’Ñ’´’°÷Å’∂’•’¨ ’∂’∏÷Ä ’°’¨’´÷Ñ", callback_data="connect_info")],
            [types.InlineKeyboardButton(text="‚Ü©Ô∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’¥’•’∂’µ’∏÷Ç", callback_data="back_to_menu")],
        ])

        await cb.message.answer(
            "‚ùå ‘¥’∏÷Ç÷Ñ ’§’•’º ’π’•÷Ñ ’¥’´’°÷Å÷Ä’•’¨ ’∏’π ’¥’´ ’°’¨’´÷Ñ÷â\n\n"
            "üì° ‘ø’°÷Ä’∏’≤ ’•÷Ñ ’¥’´’°÷Å’∂’•’¨ ’∂’∏÷Ä ’°’¨’´÷Ñ’ù /start ’∞÷Ä’°’¥’°’∂’∏’æ÷â",
            reply_markup=keyboard,
        )
        await cb.answer()
        return

    keyboard = []
    for ch in channels:
        title = ch.get("title", "‘±’∂’°’∂’∏÷Ç’∂ ’°’¨’´÷Ñ")
        cid = str(ch["channel_id"])
        keyboard.append([
            types.InlineKeyboardButton(text=f"üì¢ {title}", callback_data=f"{CB_PREFIX}|show|{cid}")
        ])

    keyboard.append([
        types.InlineKeyboardButton(text="‚ûï ’Ñ’´’°÷Å’∂’•’¨ ’∂’∏÷Ä ’°’¨’´÷Ñ", callback_data="connect_info")
    ])
    keyboard.append([
        types.InlineKeyboardButton(text="‚Ü©Ô∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’¥’•’∂’µ’∏÷Ç", callback_data="back_to_menu")
    ])

    kb = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    await cb.message.answer(
        "‚öôÔ∏è ’Å’•÷Ä ’¥’´’°÷Å’æ’°’Æ ’°’¨’´÷Ñ’∂’•÷Ä’®‚Ä§\n\n"
        "‘∏’∂’ø÷Ä’•÷Ñ ÷Å’°’∂’Ø’´÷Å ’°’¨’´÷Ñ’®’ù ’°’æ’•’¨’´’∂ ’ø’•’Ω’∂’•’¨’∏÷Ç ’Ø’°’¥ ’°’∂’ª’°’ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â",
        reply_markup=kb
    )
    await cb.answer()


# ---------------------
# üîπ SHOW CHANNEL INFO
# ---------------------
@router.callback_query(F.data.startswith(f"{CB_PREFIX}|show|"))
async def show_channel_info(cb: types.CallbackQuery):
    try:
        _, _, cid = cb.data.split("|", 2)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Bad channel show callback: {cb.data}")
        await cb.answer("’ç’≠’°’¨ ’ø’æ’µ’°’¨÷â", show_alert=True)
        return

    channel = await channels_collection.find_one({"channel_id": int(cid)})
    if not channel:
        await cb.message.answer("‚ùå ‘±’¨’´÷Ñ’® ’°’µ’¨÷á’Ω ’π’Ø’° ’Ø’°’¥ ’°÷Ä’§’•’∂ ’°’∂’ª’°’ø’æ’•’¨ ’ß÷â")
        await cb.answer()
        return

    title = channel.get("title", "‘±’∂’°’∂’∏÷Ç’∂ ’°’¨’´÷Ñ")
    owner_id = channel.get("owner_id")
    connected_at = channel.get("connected_at", "‘±’∂’∞’°’µ’ø")

    text = (
        f"üì¢ <b>{title}</b>\n"
        f"üë§ ’Ä’°’Ω÷Å’•’°’ø’•÷Ä‚Ä§ <code>{owner_id}</code>\n"
        f"üìÖ ’Ñ’´’°÷Å’æ’•’¨ ’ß’ù {connected_at}\n\n"
        "‘ø’°÷Ä’∏’≤ ’•÷Ñ ’°’∂’ª’°’ø’•’¨ ’°’¨’´÷Ñ’®, ’∏÷Ä’∫’•’Ω’¶’´ ’¢’∏’ø’® ’§’°’§’°÷Ä’•÷Å’∂’´ ’∞÷Ä’°’∫’°÷Ä’°’Ø’∏÷Ç’¥’∂’•÷Ä’®÷â"
    )

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå ‘±’∂’ª’°’ø’•’¨ ’¢’∏’ø’®", callback_data=f"{CB_PREFIX}|disconnect|{cid}")],
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="manage_channels")],
    ])

    await cb.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await cb.answer()


# ---------------------
# üîπ DISCONNECT CHANNEL
# ---------------------
@router.callback_query(F.data.startswith(f"{CB_PREFIX}|disconnect|"))
async def disconnect_channel(cb: types.CallbackQuery):
    try:
        _, _, cid = cb.data.split("|", 2)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Bad disconnect callback: {cb.data}")
        await cb.answer("’ç’≠’°’¨ ’ø’æ’µ’°’¨÷â", show_alert=True)
        return

    result = await channels_collection.delete_one({"channel_id": int(cid)})

    if result.deleted_count:
        await cb.message.answer("‚úÖ ‘±’¨’´÷Ñ’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’°’∂’ª’°’ø’æ’•÷Å÷â")
        logger.info(f"üßπ Channel {cid} disconnected by user {cb.from_user.id}")
    else:
        await cb.message.answer("‚ö†Ô∏è ‘±’¨’´÷Ñ’® ’°÷Ä’§’•’∂ ’°’∂’ª’°’ø’æ’°’Æ ’ß÷Ä÷â")

    await cb.answer()

@router.message(F.chat_shared)
async def handle_channel_shared(message: types.Message):
    shared = message.chat_shared
    chat_id = shared.chat_id
    user_id = message.from_user.id

    try:
        chat = await message.bot.get_chat(chat_id)

        await channels_collection.update_one(
            {"channel_id": chat_id},
            {"$set": {
                "title": chat.title,
                "owner_id": user_id,
                "connected_at": message.date
            }},
            upsert=True,
        )

        await message.answer(
            f"‚úÖ ‘±’¨’´÷Ñ’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’¥’´’°÷Å’æ’•÷Å’ù <b>{chat.title}</b>÷â",
            parse_mode="HTML",
        )

    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∞’°’¥’∏’¶’æ’•÷Ñ, ’∏÷Ä ’¢’∏’ø’® ’°’æ’•’¨’°÷Å’æ’°’Æ ’ß ’±’•÷Ä ’°’¨’´÷Ñ ’∏÷Ä’∫’•’Ω ’°’§’¥’´’∂’´’Ω’ø÷Ä’°’ø’∏÷Ä÷â"
        )
        print(f"Error saving channel: {e}")
